To design a Student Management System in MongoDB, you can create a database and a collection for students. The student collection can have the following attributes:

studentid: string
studentname: string
department: string
city: string
birthdate: date
educationalBackground: string
fee: number
currentYear: number
joinDate: date
leavingDate: date
skills: array
You can then implement the following statements using MongoDB aggregation queries:

1. List all the students from institute.

db.students.find({})
2. Display all the Students in seniority level( based on birthdate).

db.students.aggregate([
  { $sort: { birthdate: 1 } }
])
3. Display total no of students from each department.

db.students.aggregate([
  {
    $group: {
      _id: "$department",
      count: { $sum: 1 }
    }
  },
  { $sort: { count: -1 } }
])
4. List the student details that are from Baroda or Ahmedabad and in CSE department.

db.students.find({ department: "CSE", city: { $in: ["Baroda", "Ahmedabad"] } })
5. Display the information of students having programming skill and in computer department who are currently joined.

db.students.find({ department: "Computer", skills: { $in: ["Programming"] }, leavingDate: null })
6. List of the studentid, studentname, department number and skill of student whose join date is 20th of any month.

db.students.find({ joinDate: { $dayOfMonth: 20 } })
7. Calculate age of each student. Consider the today’s date.

db.students.aggregate([
  {
    $addFields: {
      age: {
        $divide: [
          {
            $subtract: [new Date(), "$birthdate"]
          },
          1000 * 60 * 60 * 24 * 365
        ]
      }
    }
  },
  { $project: { _id: 0, studentid: 1, studentname: 1, age: 1 } }
])
8. Calculate department wise total fee and display the departments in ascending order of total fee.

db.students.aggregate([
  {
    $group: {
      _id: "$department",
      totalFee: { $sum: "$fee" }
    }
  },
  { $sort: { totalFee: 1 } }
])
9. List the name of student whose name staring with ‘s’ or ‘m’ character who are in computer department and having typing skill.

db.students.find({ name: { $regex: "^[s|m]" }, department: "Computer", skills: { $in: ["Typing"] } })

10. Count the no of student in IT department of Pune Location.

db.students.countDocuments({ department: "IT", city: "Pune" })
11. Arrange the student name in alphabetic order whose age between 18 to 20 and in ETC department.

db.students.find({ department: "ETC", age: { $between: [18, 20] } }).sort({ studentname: 1 })
12. Count total no of student in CSE department.

db.students.countDocuments({ department: "CSE" })
